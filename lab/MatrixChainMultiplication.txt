Matrix Chain Multiplication using Recursion:
We can solve the problem using recursion based on the following facts and observations:

Two matrices of size m*n and n*p when multiplied, they generate a matrix of size m*p and the number of multiplications performed are m*n*p.

Now, for a given chain of N matrices, the first partition can be done in N-1 ways. For example, sequence of matrices A, B, C and D can be grouped as (A)(BCD), (AB)(CD) or (ABC)(D) in these 3 ways. 

So a range [i, j] can be broken into two groups like {[i, i+1], [i+1, j]}, {[i, i+2], [i+2, j]}, . . . , {[i, j-1], [j-1, j]}.

Each of the groups can be further partitioned into smaller groups and we can find the total required multiplications by solving for each of the groups.
The minimum number of multiplications among all the first partitions is the required answer.
Follow the steps mentioned below to implement the approach:

Create a recursive function that takes i and j as parameters that determines the range of a group.
Iterate from k = i to j to partition the given range into two groups.
Call the recursive function for these groups.
Return the minimum value among all the partitions as the required minimum number of multiplications to multiply all the matrices of this group.
The minimum value returned for the range 0 to N-1 is the required answer.
Below is the implementation of the above approach.


// Java code to implement the
// matrix chain multiplication using recursion
import java.io.*;
import java.util.*;
class MatrixChainMultiplication {
 
    // Matrix Ai has dimension p[i-1] x p[i]
    // for i = 1 . . . n
    static int MatrixChainOrder(int p[], int i, int j)
    {
        if (i == j)
            return 0;
 
        int min = Integer.MAX_VALUE;
 
        // Place parenthesis at different places
        // between first and last matrix,
        // recursively calculate count of multiplications
        // for each parenthesis placement
        // and return the minimum count
        for (int k = i; k < j; k++) {
            int count = MatrixChainOrder(p, i, k)
                        + MatrixChainOrder(p, k + 1, j)
                        + p[i - 1] * p[k] * p[j];
 
            if (count < min)
                min = count;
        }
 
        // Return minimum count
        return min;
    }
 
    // Driver code
    public static void main(String args[])
    {
        int arr[] = new int[] { 1, 2, 3, 4, 3 };
        int N = arr.length;
 
        // Function call
        System.out.println(
            "Minimum number of multiplications is "
            + MatrixChainOrder(arr, 1, N - 1));
    }
}















Dynamic Programming Solution for Matrix Chain Multiplication using Memoization:
Below is the recursion tree for the 2nd example of the above recursive approach:

Recursion tree for the above approach

If observed carefully you can find the following two properties:

1) Optimal Substructure: In the above case, we are breaking the bigger groups into smaller subgroups and solving them to finally find the minimum number of multiplications.
 Therefore, it can be said that the problem has optimal substructure property.

2) Overlapping Subproblems: We can see in the recursion tree that the same subproblems are called again and again and this problem has the Overlapping Subproblems property. 

So Matrix Chain Multiplication problem has both properties of a dynamic programming problem. So recomputations of same subproblems can be avoided by constructing a temporary array dp[][] in a bottom up manner.

Follow the below steps to solve the problem:

Build a matrix dp[][] of size N*N for memoization purposes.
Use the same recursive call as done in the above approach:
When we find a range (i, j) for which the value is already calculated, return the minimum value for that range (i.e., dp[i][j]).
Otherwise, perform the recursive calls as mentioned earlier.
The value stored at dp[0][N-1] is the required answer.
Below is the implementation of the above approach 


// Java program using memoization 
import java.io.*;
import java.util.*;
class GFG
{
 
  static int[][] dp = new int[100][100];
 
  // Function for matrix chain multiplication 
  static int matrixChainMemoised(int[] p, int i, int j) 
  { 
    if (i == j)  
    { 
      return 0; 
    } 
    if (dp[i][j] != -1)  
    { 
      return dp[i][j]; 
    } 
    dp[i][j] = Integer.MAX_VALUE; 
    for (int k = i; k < j; k++)  
    { 
      dp[i][j] = Math.min( 
        dp[i][j], matrixChainMemoised(p, i, k) 
        + matrixChainMemoised(p, k + 1, j) 
        + p[i - 1] * p[k] * p[j]); 
    } 
    return dp[i][j]; 
  } 
 
  static int MatrixChainOrder(int[] p, int n) 
  { 
    int i = 1, j = n - 1; 
    return matrixChainMemoised(p, i, j); 
  } 
 
  // Driver Code
  public static void main (String[] args)
  {
 
    int arr[] = { 1, 2, 3, 4 }; 
    int n= arr.length;
 
    for (int[] row : dp) 
      Arrays.fill(row, -1); 
 
    System.out.println("Minimum number of multiplications is " + MatrixChainOrder(arr, n));
  }
}
 






 Dynamic Programming Solution for Matrix Chain Multiplication using Tabulation (Iterative Approach):
In iterative approach, we initially need to find the number of multiplications required to multiply two adjacent matrices.
We can use these values to find the minimum multiplication required for matrices in a range of length 3 and further use those values for ranges with higher lengths. 

Build on the answer in this manner till the range becomes [0, N-1].

Follow the steps mentioned below to implement the idea:

Iterate from l = 2 to N-1 which denotes the length of the range:
Iterate from i = 0 to N-1:
Find the right end of the range (j) having l matrices.
Iterate from k = i+1 to j which denotes the point of partition.
Multiply the matrices in range (i, k) and (k, j).
This will create two matrices with dimensions arr[i-1]*arr[k] and arr[k]*arr[j].
The number of multiplications to be performed to multiply these two matrices (say X) are arr[i-1]*arr[k]*arr[j].
The total number of multiplications is dp[i][k]+ dp[k+1][j] + X.
The value stored at dp[1][N-1] is the required answer.
Below is the implementation of the above approach.


// Dynamic Programming Java implementation of Matrix
// Chain Multiplication.
// See the Cormen book for details of the following
// algorithm
import java.util.*;
import java.io.*;
class MatrixChainMultiplication 
{
 
    // Matrix Ai has dimension p[i-1] x p[i] for i = 1..n
    static int MatrixChainOrder(int p[], int n)
    {
        /* For simplicity of the 
        program, one extra row and
        one extra column are allocated in m[][].  0th row
        and 0th column of m[][] are not used */
        int m[][] = new int[n][n];
 
        int i, j, k, L, q;
 
        /* m[i, j] = Minimum number of scalar
        multiplications needed to compute the matrix
        A[i]A[i+1]...A[j] = A[i..j] where
        dimension of A[i] is p[i-1] x p[i] */
 
        // cost is zero when multiplying one matrix.
        for (i = 1; i < n; i++)
            m[i][i] = 0;
 
        // L is chain length.
        for (L = 2; L < n; L++) 
        {
            for (i = 1; i < n - L + 1; i++) 
            {
                j = i + L - 1;
                if (j == n)
                    continue;
                m[i][j] = Integer.MAX_VALUE;
                for (k = i; k <= j - 1; k++) 
                {
                    // q = cost/scalar multiplications
                    q = m[i][k] + m[k + 1][j]
                        + p[i - 1] * p[k] * p[j];
                    if (q < m[i][j])
                        m[i][j] = q;
                }
            }
        }
 
        return m[1][n - 1];
    }
 
    // Driver code
    public static void main(String args[])
    {
        int arr[] = new int[] { 1, 2, 3, 4 };
        int size = arr.length;
 
        System.out.println(
            "Minimum number of multiplications is "
            + MatrixChainOrder(arr, size));
    }
}